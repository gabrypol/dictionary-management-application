{"version":3,"sources":["Dictionary/NewRowForm.js","Dictionary/Row.js","Dictionary/Dictionary.js","ListOfDictionaries/NewDictionaryForm.js","ListOfDictionaries/Dict.js","ListOfDictionaries/ListOfDictionaries.js","App.js","serviceWorker.js","index.js"],"names":["NewRowForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","domain","range","handleChange","bind","assertThisInitialized","handleSubmit","evt","setState","defineProperty","target","name","value","preventDefault","createRow","objectSpread","id","uuid","_this$state","isEnabled","length","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","disabled","Component","Row","isEditing","handleRemove","toggleForm","handleUpdate","removeRow","updateRow","result","htmlFor","onClick","index_es","icon","Dictionary","componentDidMount","rows","JSON","parse","localStorage","getItem","validate","hasDuplicates","array","Set","size","hasChain","i","rangeArray","includes","hasCycle","indexOf","create","remove","update","storeRowInLocalStorage","removeRowFromLocalStorage","updateRowInLocalStorage","row","push","setItem","stringify","idRowToRemove","forEach","index","splice","idRowToUpdate","updatedDomain","updatedRange","newRow","_this2","concat","toConsumableArray","_this3","filter","_this4","updatedRows","map","_this5","domainArray","el","domainHasDuplicates","rangeHasDuplicates","_this6","src_Dictionary_Row","key","src_Dictionary_NewRowForm","NewDictionaryForm","dictionary","createDictionary","Dict","removeDictionary","updateDictionary","ListOfDictionaries","dictionaries","storeDictionaryInLocalStorage","removeDictionaryFromLocalStorage","updateDictionaryInLocalStorage","idDictionaryToRemove","idDictionaryToUpdate","updatedDictionary","newDictionary","updatedDictionaries","src_ListOfDictionaries_Dict","src_ListOfDictionaries_NewDictionaryForm","library","add","faPen","faTrash","App","src_Dictionary_Dictionary","src_ListOfDictionaries_ListOfDictionaries","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e443d35.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport uuid from \"uuid/v4\";\nimport \"./NewRowForm.css\";\n\nclass NewRowForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { domain: \"\", range: \"\"};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  handleSubmit(evt) {\n    evt.preventDefault();\n    this.props.createRow({ ...this.state, id: uuid()});\n    this.setState({ domain: \"\", range: \"\" });\n  }\n  \n  render() {\n    const { domain, range } = this.state;\n    const isEnabled = domain.length > 0 && range.length > 0;\n    return (\n      <form className='NewRowForm' onSubmit={this.handleSubmit}>\n        <p>ADD NEW ROW:</p>\n        <input\n          type='text'\n          placeholder='Insert domain...'\n          id='domain'\n          name='domain'\n          value={this.state.domain}\n          onChange={this.handleChange}\n        />\n        \n        <input\n          type='text'\n          placeholder='Insert range...'\n          id='range'\n          name='range'\n          value={this.state.range}\n          onChange={this.handleChange}\n        />\n        <button disabled={!isEnabled}>Add</button>\n      </form>\n    );\n  }\n}\n\nexport default NewRowForm;","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport \"./Row.css\";\n\nclass Row extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false,\n      domain: this.props.domain, \n      range: this.props.range\n    };\n    this.handleRemove = this.handleRemove.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n  }\n\n  handleRemove() {\n    this.props.removeRow(this.props.id);\n  }\n\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing });\n  }\n\n  handleUpdate(evt) {\n    evt.preventDefault();\n    //take new domain and range and pass them up to parent\n    this.props.updateRow(this.props.id, this.state.domain, this.state.range);\n    this.setState({ isEditing: false });\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n \n  render() {\n    const { domain, range } = this.state;\n    const isEnabled = domain.length > 0 && range.length > 0;\n    let result;\n    if (this.state.isEditing) {\n      result = (\n          <form className='Row-edit-form' onSubmit={this.handleUpdate}>\n            <label htmlFor='domain'>Edit domain:</label>\n            <input\n              type='text'\n              value={this.state.domain}\n              id='domain'\n              name='domain'\n              onChange={this.handleChange}\n            />\n            <label htmlFor='range'>Edit range:</label>\n            <input\n              type='text'\n              value={this.state.range}\n              id='range'\n              name='range'\n              onChange={this.handleChange}\n            />\n            <button disabled={!isEnabled}>Save</button>\n          </form>\n      );\n    } else {\n      result = (\n          <li className='Row-row'>\n            <div>Domain: <span>{this.props.domain}</span></div>\n            <div>Range: <span>{this.props.range}</span></div>\n          </li>\n      );\n    }\n\n    return (\n      <div className='Row'>\n        {result}\n        <div className='Row-buttons'>\n          <button onClick={this.toggleForm}>\n            <FontAwesomeIcon icon=\"pen\"/>\n          </button>\n          <button onClick={this.handleRemove}>\n            <FontAwesomeIcon icon=\"trash\"/>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Row;\n\n","import React, { Component } from \"react\";\nimport NewRowForm from \"./NewRowForm\";\nimport Row from \"./Row\";\nimport \"./Dictionary.css\";\n\nclass Dictionary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: []\n    };\n    this.create = this.create.bind(this);\n    this.remove = this.remove.bind(this);\n    this.update = this.update.bind(this);\n    this.validate = this.validate.bind(this);\n    this.hasDuplicates = this.hasDuplicates.bind(this);\n    this.hasChain = this.hasChain.bind(this);\n    this.storeRowInLocalStorage = this.storeRowInLocalStorage.bind(this);\n    this.removeRowFromLocalStorage = this.removeRowFromLocalStorage.bind(this);\n    this.updateRowInLocalStorage = this.updateRowInLocalStorage.bind(this);\n  }\n\n  componentDidMount = () => {\n    let rows = JSON.parse(localStorage.getItem('rows')) || [];\n    this.setState({ rows }, this.validate);\n  }\n\n  storeRowInLocalStorage(row) {\n    let rows;\n    if (localStorage.getItem('rows') === null) {\n      rows = [];\n    } else {\n      rows = JSON.parse(localStorage.getItem('rows'));\n    }\n    rows.push(row);\n\n    localStorage.setItem('rows', JSON.stringify(rows));\n  }\n\n  removeRowFromLocalStorage(idRowToRemove) {\n    let rows;\n    if(localStorage.getItem('rows') === null) {\n      rows = [];\n    } else {\n      rows = JSON.parse(localStorage.getItem('rows'));\n    }\n\n    rows.forEach((row, index) => {\n        if(idRowToRemove === row.id) {\n          rows.splice(index, 1);\n        }\n    });\n\n    localStorage.setItem('rows', JSON.stringify(rows));\n  }\n\n  updateRowInLocalStorage(idRowToUpdate, updatedDomain, updatedRange) {\n    let rows;\n    if(localStorage.getItem('rows') === null) {\n      rows = [];\n    } else {\n      rows = JSON.parse(localStorage.getItem('rows'));\n    }\n\n    rows.forEach((row, index) => {\n        if(idRowToUpdate === row.id) {\n          rows.splice(index, 1, {domain: updatedDomain, range: updatedRange, id: idRowToUpdate});\n        }\n    });\n\n    localStorage.setItem('rows', JSON.stringify(rows));\n  }\n\n  create(newRow) {\n    this.setState({\n      rows: [...this.state.rows, newRow]\n    }, () => {\n      this.storeRowInLocalStorage(newRow);\n      this.validate();\n  })};\n\n  remove(id) {\n    this.setState({\n      rows: this.state.rows.filter(row => row.id !== id)\n    }, () => {\n      this.removeRowFromLocalStorage(id);\n      this.validate();\n  })};\n\n  update(id, updatedDomain, updatedRange) {\n    const updatedRows = this.state.rows.map(row => {\n      if (row.id === id) {\n        return { ...row, domain: updatedDomain, range: updatedRange };\n      }\n      return row;\n    });\n    this.setState({ rows: updatedRows }, () => {\n      this.updateRowInLocalStorage(id, updatedDomain, updatedRange);\n      this.validate();\n  })};\n    \n  // Validation\n  validate() {\n    let domainArray = this.state.rows.map(el => el.domain);\n    let rangeArray = this.state.rows.map(el => el.range);\n    \n    this.setState({\n      domainArray: domainArray, \n      rangeArray: rangeArray,\n      \n    }, () => this.setState({\n      domainHasDuplicates: this.hasDuplicates(domainArray),\n      rangeHasDuplicates: this.hasDuplicates(rangeArray),\n      hasChain: this.hasChain(domainArray), \n      hasCycle: this.hasCycle(domainArray)\n    }))\n  }\n\n  hasDuplicates = array => {\n    return (new Set(array)).size !== array.length;\n  }\n\n  hasChain = array => {\n    for (let i = 0; i < array.length; i++) {\n      if(this.state.rangeArray.includes(array[i])) {\n        return true;\n      }\n    }\n  }\n\n  hasCycle = array => {\n    for (let i = 0; i < array.length; i++) {\n      if(this.state.rangeArray.includes(array[i]) && this.state.rangeArray[i] === array[this.state.rangeArray.indexOf(array[i])]) {\n        return true;\n      }\n    }\n  }\n\n  render() {\n    let domainHasDuplicates = this.state.domainHasDuplicates;\n    let rangeHasDuplicates = this.state.rangeHasDuplicates;\n    let hasChain = this.state.hasChain;\n    let hasCycle = this.state.hasCycle;\n    let result;\n    if (domainHasDuplicates && rangeHasDuplicates) {\n      result = <p>This dictionary has at least one DUPLICATE!</p>\n    } else if (domainHasDuplicates && !rangeHasDuplicates) {\n      result = <p>This dictionary has at least one FORK!</p>\n    } else if (hasChain) {\n      result = <p>This dictionary has at least one CHAIN!</p>\n      if (hasCycle) {\n        result = <p>This dictionary has at least one CYCLE!</p>\n      }\n    } \n    \n    const rows = this.state.rows.map(row => {\n      return (\n          <Row\n            key={row.id}\n            id={row.id}\n            domain={row.domain}\n            range={row.range}\n            removeRow={this.remove}\n            updateRow={this.update}\n          />\n      );\n    });\n\n    return (\n      <div className='Dictionary'>\n        <h1>Dictionary <span>xyz</span></h1>\n        <ul>\n          {rows}\n        </ul>\n        <NewRowForm createRow={this.create} />\n        <br/>\n        {result}\n      </div>\n    );\n  }\n}\n\nexport default Dictionary;\n\n\n","import React, { Component } from \"react\";\nimport uuid from \"uuid/v4\";\nimport \"./NewDictionaryForm.css\";\n\nclass NewDictionaryForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { dictionary: \"\"};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  handleSubmit(evt) {\n    evt.preventDefault();\n    this.props.createDictionary({ ...this.state, id: uuid()});\n    this.setState({ dictionary: \"\"});\n  }\n  \n  render() {\n    const { dictionary } = this.state;\n    const isEnabled = dictionary.length > 0;\n    return (\n      <form className='NewDictionaryForm' onSubmit={this.handleSubmit}>\n        <label htmlFor='dictionary'>ADD NEW DICTIONARY:</label>\n        <input\n          type='text'\n          placeholder='Insert name...'\n          id='dictionary'\n          name='dictionary'\n          value={this.state.dictionary}\n          onChange={this.handleChange}\n        />\n        <button disabled={!isEnabled}>Add</button>\n      </form>\n    );\n  } \n}\n\nexport default NewDictionaryForm;","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport \"./Dict.css\";\n\nclass Dict extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false,\n      dictionary: this.props.dictionary, \n    };\n    this.handleRemove = this.handleRemove.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n  }\n\n  handleRemove() {\n    this.props.removeDictionary(this.props.id);\n  }\n\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing });\n  }\n\n  handleUpdate(evt) {\n    evt.preventDefault();\n    //take new dictionary and pass it up to parent\n    this.props.updateDictionary(this.props.id, this.state.dictionary);\n    this.setState({ isEditing: false });\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n \n  render() {\n    const { dictionary } = this.state;\n    const isEnabled = dictionary.length > 0;\n    let result;\n    if (this.state.isEditing) {\n      result = (\n          <form className='Dict-edit-form' onSubmit={this.handleUpdate}>\n            <label htmlFor='dictionary'>Rename dictionary:</label>\n            <input\n              type='text'\n              value={this.state.dictionary}\n              id='dictionary'\n              name='dictionary'\n              onChange={this.handleChange}\n            />\n            <button disabled={!isEnabled}>Save</button>\n          </form>\n      );\n    } else {\n      result = (\n          <li className='Dict-row'>\n            {this.props.dictionary}\n          </li>\n      );\n    }\n\n    return (\n      <div className='Dict'>\n        {result}\n        <div className='Dict-buttons'>\n          <button onClick={this.toggleForm}>\n            <FontAwesomeIcon icon=\"pen\"/>\n          </button>\n          <button onClick={this.handleRemove}>\n            <FontAwesomeIcon icon=\"trash\"/>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dict;\n","import React, { Component } from \"react\";\nimport NewDictionaryForm from \"./NewDictionaryForm\";\nimport Dict from \"./Dict\";\nimport \"./ListOfDictionaries.css\";\n\nclass ListOfDictionaries extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dictionaries: []\n    };\n    this.create = this.create.bind(this);\n    this.remove = this.remove.bind(this);\n    this.update = this.update.bind(this);\n    this.storeDictionaryInLocalStorage = this.storeDictionaryInLocalStorage.bind(this);\n    this.removeDictionaryFromLocalStorage = this.removeDictionaryFromLocalStorage.bind(this);\n    this.updateDictionaryInLocalStorage = this.updateDictionaryInLocalStorage.bind(this);\n  }\n\n  componentDidMount = () => {\n    let dictionaries = JSON.parse(localStorage.getItem('dictionaries')) || [];\n    this.setState({ dictionaries });\n  }\n\n  storeDictionaryInLocalStorage(dictionary) {\n    let dictionaries;\n    if (localStorage.getItem('dictionaries') === null) {\n      dictionaries = [];\n    } else {\n      dictionaries = JSON.parse(localStorage.getItem('dictionaries'));\n    }\n    dictionaries.push(dictionary);\n\n    localStorage.setItem('dictionaries', JSON.stringify(dictionaries));\n  }\n\n  removeDictionaryFromLocalStorage(idDictionaryToRemove) {\n    let dictionaries;\n    if(localStorage.getItem('dictionaries') === null) {\n      dictionaries = [];\n    } else {\n      dictionaries = JSON.parse(localStorage.getItem('dictionaries'));\n    }\n\n    dictionaries.forEach((dictionary, index) => {\n        if(idDictionaryToRemove === dictionary.id) {\n          dictionaries.splice(index, 1);\n        }\n    });\n\n    localStorage.setItem('dictionaries', JSON.stringify(dictionaries));\n  }\n\n  updateDictionaryInLocalStorage(idDictionaryToUpdate, updatedDictionary) {\n    let dictionaries;\n    if(localStorage.getItem('dictionaries') === null) {\n      dictionaries = [];\n    } else {\n      dictionaries = JSON.parse(localStorage.getItem('dictionaries'));\n    }\n\n    dictionaries.forEach((dictionary, index) => {\n        if(idDictionaryToUpdate === dictionary.id) {\n          dictionaries.splice(index, 1, {dictionary: updatedDictionary, id: idDictionaryToUpdate});\n        }\n    });\n\n    localStorage.setItem('dictionaries', JSON.stringify(dictionaries));\n  }\n\n\n  create(newDictionary) {\n    this.setState({\n      dictionaries: [...this.state.dictionaries, newDictionary]\n    }, this.storeDictionaryInLocalStorage(newDictionary))\n  }\n\n  remove(id) {\n    this.setState({\n      dictionaries: this.state.dictionaries.filter(dictionary => dictionary.id !== id)\n    }, this.removeDictionaryFromLocalStorage(id));\n  }\n\n  update(id, updatedDictionary) {\n    const updatedDictionaries = this.state.dictionaries.map(dictionary => {\n      if (dictionary.id === id) {\n        return { ...dictionary, dictionary: updatedDictionary};\n      }\n      return dictionary;\n    });\n    this.setState({ dictionaries: updatedDictionaries }, this.updateDictionaryInLocalStorage(id, updatedDictionary));\n  }\n  \n  render() {\n    const dictionaries = this.state.dictionaries.map(dictionary => {\n      return (\n          <Dict\n            key={dictionary.id}\n            id={dictionary.id}\n            dictionary={dictionary.dictionary}\n            removeDictionary={this.remove}\n            updateDictionary={this.update}\n          />\n      );\n    });\n\n    return (\n      <div className='ListOfDictionaries'>\n        <h1>List of <span>Dictionaries</span></h1>\n        <ul>\n          {dictionaries}\n        </ul>\n        <NewDictionaryForm createDictionary={this.create} />\n      </div>\n    );\n  }\n}\n\nexport default ListOfDictionaries;\n","import React from \"react\";\nimport Dictionary from \"./Dictionary/Dictionary\";\nimport ListOfDictionaries from \"./ListOfDictionaries/ListOfDictionaries\";\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faPen, faTrash } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faPen, faTrash);\n\nfunction App() {\n  return (\n    <div>\n        <Dictionary />\n        <ListOfDictionaries />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}